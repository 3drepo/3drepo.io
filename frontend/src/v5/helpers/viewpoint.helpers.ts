/**
 *  Copyright (C) 2023 3D Repo Ltd
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { rgbaToHex } from '@/v4/helpers/colors';
import { generateViewpoint as generateViewpointV4, getNodesIdsFromSharedIds } from '@/v4/helpers/viewpoints';
import { formatMessage } from '../services/intl';
import { ViewpointGroupHierarchyType, ViewpointGroupHierarchy, ViewpointGroup, ViewpointState } from '../store/tickets/tickets.types';

const convertToV5GroupHierarchy = (group: any, type: ViewpointGroupHierarchyType): ViewpointGroupHierarchy => {
	let description = '';
	let name = '';
	switch (type) {
		case ViewpointGroupHierarchyType.Colour:
			// eslint-disable-next-line no-case-declarations
			const color = rgbaToHex(group.color.join(','));
			description = formatMessage({ id: 'viewpoint.autogeneratedColorGroup.description', defaultMessage: 'Autogenerated group from viewer for colour {color}' }, { color });
			name = formatMessage({ id: 'viewpoint.autogeneratedColorGroup.name', defaultMessage: 'Default {color} group' }, { color });
			break;
		case ViewpointGroupHierarchyType.Transform:
			description = formatMessage({ id: 'viewpoint.autogeneratedTransformGroup.description', defaultMessage: 'Autogenerated group from viewer for transform' });
			name = formatMessage({ id: 'viewpoint.autogeneratedTransformGroup.name', defaultMessage: 'Default transform' });
			break;
		default:
			description = formatMessage({ id: 'viewpoint.autogeneratedColorHidden.description', defaultMessage: 'Autogenerated hidden group from viewer' });
			name = formatMessage({ id: 'viewpoint.autogeneratedColorHidden.name', defaultMessage: 'Default hidden' });
			break;
	}

	const hierarchy:ViewpointGroupHierarchy = { group: { description, name } };

	(hierarchy.group as ViewpointGroup).objects = group.objects.map((object) => (
		{ container: object.model as string, _ids: getNodesIdsFromSharedIds([object]) }
	));

	if (group.color) {
		const { color } = group;
		if (color.length > 3) {
			hierarchy.opacity = color.pop() / 255;
		}
		hierarchy.color = color;
	}

	if (group.opacity) {
		const { opacity } = group;
		hierarchy.opacity = opacity;
	}

	return hierarchy;
};

export const getViewerState = async () => {
	const { viewpoint: viewpointV4 } = await generateViewpointV4();

	const state: ViewpointState = { showDefaultHidden: !viewpointV4.hideIfc };

	if (viewpointV4.override_groups?.length) {
		state.colored = viewpointV4.override_groups.map((group) => convertToV5GroupHierarchy(group, ViewpointGroupHierarchyType.Colour));
	}

	if (viewpointV4.hidden_group) {
		state.hidden = [convertToV5GroupHierarchy(viewpointV4.hidden_group, ViewpointGroupHierarchyType.Hidden)];
	}

	if (viewpointV4.transformation_groups) {
		state.transformed = viewpointV4.transformation_groups.map((group) => convertToV5GroupHierarchy(group, ViewpointGroupHierarchyType.Transform));
	}

	return state;
};
