append menu
	script.
		$(document).ready( function() {
				window.namespaces = [];
				});

		function getKeyPath(obj) {
			if (obj.hasAttribute("namespacename"))
				if (obj.getAttribute("namespacename") == "model")
					return "";
			
			return getKeyPath(obj.parentElement) + "/" + obj.getAttribute("DEF");	
		};

		function clickObject(event) {
			lookAtObject(event.target);
			setApp(event.target);
			var tree = $("#scenetree").fancytree("getTree");
			tree.loadKeyPath(getKeyPath(event.target), function(node, status) {
			  if(status === "loaded") {
				node.setActive();
			  }else if(status === "ok") {
			    node.setActive();
			  }
			});
			//tree.activateKey(event.target.getAttribute("DEF"));
		};

		function lookAtPoint(x,y,z) {
			var model = document.getElementsByTagName("X3D")[0];
			if(model && model.runtime){
				var pickVec = new x3dom.fields.SFVec3f(x,y,z);
				model.runtime.canvas.doc._viewarea._pick = pickVec;
				model.runtime.canvas.doc._viewarea.onDoubleClick();
			}
		};

		function lookAtObject(obj)
		{
			var mat = obj._x3domNode.getCurrentTransform();
			var min = x3dom.fields.SFVec3f.MAX();                                                                 
			var max = x3dom.fields.SFVec3f.MIN();                                                                                                                                                                          
			obj._x3domNode.getVolume().getBounds(min, max);                    
			
			min = mat.multMatrixPnt(min);                                                                         
			max = mat.multMatrixPnt(max);            
			
			var bboxcenter = x3dom.fields.SFVec3f;

			bboxcenter.x = (min.x + max.x) / 2;
			bboxcenter.y = (min.y + max.y) / 2;
			bboxcenter.z = (min.z + max.z) / 2;
	
			lookAtPoint(bboxcenter.x, bboxcenter.y, bboxcenter.z);
		}

		var color_dict = {"Office_A_20110811" : "0.1 0.0 0.0", "Office_S_20110811" : "0.0 0.0 0.1", "Office_MEP_20110811" : "0.0 0.1 0.1"};
	
		function setApp(group)
		{
			// Very bad hacky way of doing this, speak to Fraunhofer

			var mat_nodes = document.getElementsByTagName("TwoSidedMaterial")
		
			for(var m_idx = 0; m_idx < mat_nodes.length; m_idx++)
			{
				var color = color_dict[mat_nodes[m_idx]._x3domNode._nameSpace.name];
				mat_nodes[m_idx].setAttribute("emissiveColor", color);
				mat_nodes[m_idx].setAttribute("transparency", "0.85");
			}
			
			var grp_nodes = group.getElementsByTagName("TwoSidedMaterial")
		
			for(var m_idx = 0; m_idx < grp_nodes.length; m_idx++)
			{
				grp_nodes[m_idx].setAttribute("emissiveColor", "1.0 0.5 0.0");
				grp_nodes[m_idx].setAttribute("transparency", "0.0");
			}

		}	

		$(function () {
			$("#scenetree").fancytree({
					selectMode: 3,
					beforeSelect : function(event, data) {
						window.wasPartSelect = data.node.partsel;
					},
					select : function(event, data) {
						$('#' + data.node.data.namespace + data.node.data.uuid)[0].setAttribute("render", data.node.selected);
					
						var parent = data.node.getParent();
						if ((data.node.selected) && (data.node.selected != parent.selected))
						{
							var par_node = parent;

							while(par_node != null)
							{
								$('#' + par_node.data.namespace + par_node.data.uuid)[0].setAttribute("render", true);
								par_node = par_node.getParent();
							}

							var siblings = data.node.getParent().getChildren();

							for(var sib_idx = 0; sib_idx < siblings.length; sib_idx++)
							{
								$('#' + siblings[sib_idx].data.namespace + siblings[sib_idx].data.uuid)[0].setAttribute("render", false);
							}
						}

						/*
						if (window.wasPartSelect)
						{
							var children = data.node.getChildren();

							for(var ch_idx = 0; ch_idx < children.length; ch_idx++)
							{
								$('#' + children[ch_idx].data.namespace + children[ch_idx].data.uuid)[0].setAttribute("render", data.node.selected);
							}
						}
						*/
						},
					click: function(event, data) {
						if ("uuid" in data.node.data)
						{
							var rootObj = $('#' + data.node.data.namespace + data.node.data.uuid)[0];
							lookAtObject(rootObj);
							setApp(rootObj);
						}
					},
					checkbox: true,
					source: {
						url: "/data/" + dbname + ".src.json"
					},
					lazyLoad: function(event, data) {
						var node = data.node;

						if ("project" in node.data)
						{
							var params = {selected: node.selected, namespace: node.data.namespace};
						} else {
							var params = {mode: "children", parent: node.key, selected: node.selected, namespace: node.data.namespace};
						}

						data.result = $.ajax({
								url: "/data/" + node.data.dbname + ".src.json",
								data: params,
								cache: false
						});
					}
				});
			});	
	div#scenetree
