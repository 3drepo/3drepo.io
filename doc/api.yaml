swagger: '2.0'
info:
  title: Bid4Free API
  description: APIs for Bid4Free project
  version: "0.0.1"
# the domain of the service
#host: example.org
# array of all schemes that your API supports
schemes:
  - http
# will be prefixed to all paths
basePath: /api
produces:
  - application/json

paths:
  
  /login:
    post:
      tags: 
        - Auth
      summary: Login
      description: Login
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
                description: username
                example: abc
              password:
                type: string
                description: password
                example: '123456'
      responses:
        200:
          schema:
            type: object
            properties:
              account:
                type: string
                example: username
              roles:
               type: array
               items:
                 type: object
                 properties: 
                   role:
                    type: string
                    description: role name
                    example: MainContractor
                   db:
                    type: string
                    description: db of the role granted
                    example: anotheraccount
          description: Logged in and a list of user roles returned
        401:
          description: Wrong username or password
  /logout:
    post:
      tags: 
        - Auth
      summary: Logout
      description: Logout
      responses:
        200:
          description: Logged out
        401:
          description: You are not logged in
  /{account}/{project}/info.json:
    parameters:
      - $ref: "#/parameters/account"
      - $ref: "#/parameters/project"
    get:
      summary: Get project summary
      description: |
        This project info endpoint will return the summary of the project
      tags:
        - Project
      responses:
        200:
          description: An object of project summary
          schema:
              $ref: '#/definitions/Project'
    post:
      summary: Create or update project summary
      description: |
        This project info endpoints will create or update project summary and returns the saved project summary as response
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Project'

      tags:
        - Project
      responses:
        200:
          description: An object of project summary
          schema:
              $ref: '#/definitions/Project'
  /{account}/{project}/packages.json:
    parameters:
      - $ref: "#/parameters/account"
      - $ref: "#/parameters/project"
    get:
      summary: Get project packages
      description: |
        This endpoint returns list of packages for a project. For main contractors, it returns all packages and for sub contractors, it only returns packages that they are invited to.
      tags:
        - Package
      responses:
        200:
          description: An array of package objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Package'
    post:
      summary: Create project package
      consumes:
        - application/json
      description: |
        This endpoint create a package. Only users with main contractor role in related db have access to this endpoint.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PackageProto'
      tags:
        - Package
      responses:
        200:
          description: Package object created in database
          schema:
            $ref: '#/definitions/PackageNoAtt'
  /{account}/{project}/packages/{packageName}.json:
    parameters:
      - $ref: "#/parameters/account"
      - $ref: "#/parameters/project"
      - $ref: '#/parameters/packageName'
      
    get:
      summary: Get a project package by name
      description: |
        This endpoint returns a package specified by name with attachment details hydrated
      tags:
        - Package
      responses:
        200:
          description: A package object with attachment details hydrated
          schema:
            $ref: '#/definitions/PackageWithAtt'
        404:
          description: Package not found
          
    put:
      summary: Update package summary
      description: This endpoint update a package specified by name
      tags:
        - Package
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PackageUpdateProto'
      responses:
        200:
          description: Updated package object
          schema:
            $ref: '#/definitions/PackageNoAtt'
        404:
          description: Package not found
  /{account}/{project}/packages/{packageName}/attachments:
    parameters:
      - $ref: "#/parameters/account"
      - $ref: "#/parameters/project"
      - $ref: '#/parameters/packageName'
      
    post:
      tags:
        - Attachment
      summary: Upload package attachment
      description: This endpoint upload attachments for a package. It returns list of uploaded file metadata
      consumes:
        - multipart/form-data
      parameters:
        - name: attachment
          in: formData
          description:  file to upload
          required: true
          type: file
      responses:
        200:
         description: list of uploaded file meta
         schema:
           type: array
           items:
             $ref: '#/definitions/Attachment'
  /{account}/{project}/packages/{packageName}/attachments/{attachmentId}:
    parameters:
      - $ref: "#/parameters/account"
      - $ref: "#/parameters/project"
      - $ref: '#/parameters/packageName'
      - $ref: '#/parameters/attachmentId'
    get:
      tags:
        - Attachment
      summary: Download a package attachment
      produces:
        - application/octet-stream
      description: |
        This endpoint returns an attachment specified by id. It will force a download if browser is not able to display the file inline
      responses:
        200:
          description: Returns file binary content
        404:
          description: File not found
    delete:
      tags:
        - Attachment
      summary: Delete a package attachment
      description: |
        This endpoint deletes an attachment specified by id.
      responses:
        200:
          description: File deleted
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
        404:
          description: File not found
  /{account}/{project}/packages/{packageName}/bids.json:
    parameters:
      - $ref: "#/parameters/account"
      - $ref: "#/parameters/project"
      - $ref: '#/parameters/packageName'
    post:
      tags: 
        - Bid
      summary:
        Create(Invite) a bid
      description:
        This endpoint creates a bid for a user. (Invite sub contractor to a package to bid)
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              user:
                type: string
                description: sub contractor username to be invited
                example: pinakin
      responses:
        200:
          description: User invited and bid object created
          schema:
            $ref: '#/definitions/BidInit'
        400:
          description: User already has a bid created in this package
    get: 
      tags:
        - Bid
      summary:
        List all bids for a package
      description:
        This endpoint return a list of bids for a package. For main contractor, the list contains all the bids. For sub contractor, the list only contains the bids they are invited to.
      responses:
        200:
          description: returns list of bids
          schema:
            type: array
            items:
              $ref: '#/definitions/Bid'
  /{account}/{project}/packages/{packageName}/bids/{bidId}/award:
    parameters:
      - $ref: "#/parameters/account"
      - $ref: "#/parameters/project"
      - $ref: '#/parameters/packageName'
      - $ref: '#/parameters/bidId'
    post:
      tags: 
        - Bid
      summary:
        Award a bid
      description:
        This endpoint awards a bid specified by id and rejects all other bids in the same package.
      consumes:
        - application/json
      responses:
        200:
          description: Bid awarded
          schema:
            $ref: '#/definitions/Bid'
        400:
          description: Bid not yet submitted, accepted or declined
        404:
          description: Bid not found
  /{account}/{project}/packages/{packageName}/bids/mine.json:
    parameters:
      - $ref: "#/parameters/account"
      - $ref: "#/parameters/project"
      - $ref: '#/parameters/packageName'
    get:
      tags: 
        - Bid
      summary: Get my bid
      description: |
        This endpoints returns a bid object belongs to the logged in user. It is for sub contractor only.
      responses:
        200:
          description: Bid found
          schema:
            $ref: '#/definitions/Bid'
        404:
          description: Bid not found
        400:
          description: Not invited to bid on this package
    put:
      tags:
        - Bid
      summary: Update bid
      description: Update bid information
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              budget:
                type: number
                description: expected package budget
                example: 2000000
      responses:
        200:
          description: Bid updated
          schema:
            $ref: '#/definitions/Bid'
        404:
          description: Bid not found
        400:
          description: Bid already submitted or not yet accepted
  /{account}/{project}/packages/{packageName}/bids/mine/termsAndConds.json:
    parameters:
      - $ref: "#/parameters/account"
      - $ref: "#/parameters/project"
      - $ref: '#/parameters/packageName'
    get:
      tags:
        - Bid
      summary: Get T&C of the bid
      description: |
        This endpoint returns a T&C document object
      responses:
        200:
          description: T&C found
          schema:
            $ref: '#/definitions/TermsAndConds'
        404:
          description: Bid not found
        400:
          description: Not invited to bid on this package
    put:
      tags:
        - Bid
      consumes:
        - application/json
      summary: Create or update T&C
      description: |
        This endpoints updates or creates a T&C document object and returns the object
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TermsAndConds'
      responses:
        200:
          description: T&C object updated/created
          schema:
            $ref: '#/definitions/TermsAndConds'
        404:
          description: Bid not found
        400:
          description: Bid already submitted or not yet accepted
  /{account}/{project}/packages/{packageName}/bids/mine/submit:
    parameters:
      - $ref: "#/parameters/account"
      - $ref: "#/parameters/project"
      - $ref: '#/parameters/packageName'
    post:
      tags:
        - Bid
      consumes:
        - application/json
      summary: Submit a bid
      description: |
        This endpoint submits a bid and returns a bid object
      responses:
        200:
          description: Bid submitted
          schema:
            $ref: '#/definitions/Bid'
        404:
          description: Bid not found
        400:
          description: Bid already submitted or not yet accepted
          
definitions:
  Project:
    type: object
    properties:
      name:
        type: string
        description: Project name
        example: projectABC
      site:
        type: string
        description: Project site
        example: site
      code:
        type: string
        example: 9099
      client:
        type: string
        description: Client name
        example: CWC
      budget:
        type: number
        description: Project budget
        example: 900000000000
      completedBy:
        type: string
        format: date
        description: Expected completion date
        example: 2017-01-01
      contact:
        type: string
        description: Contact person
        example: Chris
  ID: 
    type: object
    properties:
      _id:
        type: string
        description: mongo ID in string format
        example: '000000000000000000000000'
  Audit:
    type: object
    properties:
      createdAt:
        type: string
        description: object create date
        format: time
        example: '2017-01-01T00:00:00.000Z'
      updatedAt:
        type: string
        format: time
        example: '2017-01-01T00:00:00.000Z'
        description: object update date
  
  PackageUpdateProto:
      type: object
      properties: 
        budget:
          type: number
          example: 200000000
        completedBy:
          type: string
          format: date
          description: package expected completion date
          example: '2017-01-01'
        site:
          type: string
          description: site name
          example: abc
        code:
          type: string
          description: package code
        area:
          type: string
        contact:
          type: string
          description: contact person info
          example: 'chris (Mobile: +00000000000000)'
        
  PackageProto:
    type: object
    allOf:
      - $ref: '#/definitions/PackageUpdateProto'
      - type: object
        properties: 
          name:
            type: string
            description: package name
            example: windows

        
  PackageNoAtt:
    type: object
    allOf:
      - $ref: '#/definitions/ID'
      - $ref: '#/definitions/Audit'
      - $ref: '#/definitions/PackageProto'
      - type: object
        properties:
          attachments:
            type: array
            description: list of attachment IDs
            items:
              type: string
  Package:
    type: object
    allOf:
      - $ref: '#/definitions/ID'
      - $ref: '#/definitions/Audit'
      - $ref: '#/definitions/PackageProto'
      - type: object
        properties:
          attachments:
            type: array
            description: list of attachment IDs
            items:
              $ref: '#/definitions/AttachmentId'
  AttachmentId:
    type: string
    description: 'attachment id'
    example: '56af99dc996e053137806dcb'

  PackageWithAtt:
   type: object
   allOf:
     - $ref: '#/definitions/Package'
     - type: object
       properties:
         attachments:
           type: array
           description: list of attachments
           items:
             $ref: '#/definitions/Attachment'
             
  Attachment:
    type: object
    allOf:
      - $ref: '#/definitions/ID'
      - type: object
        properties:
          length:
            type: number
            format: integer
            example: 2046
            description: File size in byte
          chunkSize:
            type: number
            format: integer
            example: 261120
            description: chunck size in mongodb fsgrid
          uplodateDate:
            type: string
            format: date
            description: file upload date
            example: '2017-01-01T00:00:00.000Z'
          md5:
            type: string
            description: file md5
            example: 04b269dc25a506eb7db721c63702d0b0
          contentType:
            type: string
            description: file mine type
            example: 'image/jpeg'
          metadata:
            type: object
            description: other file metadata
            properties:
              packageName:
                type: string
                description: package the file belongs to
                example: windows
  
  BidProto:
    type: object
    properties:
      termsAndConds:
        type: object
        description: terms and conditions document object
      
  BidInit:
    type: object
    allOf:
      - $ref: '#/definitions/ID'
      - $ref: '#/definitions/Audit'
      - $ref: '#/definitions/BidProto'
      - type: object
        properties:
          user:
            type: string
            description: username
            example: pinakin
          packageName:
            type: string
            description: package name of bid
            example: window
          invitedAt:
            type: string
            format: date
            description: invitation date
            example: '2017-01-01T00:00:00.000Z'
          awarded:
            type: boolean
            description: award status, null denotes no action has been taken yet
            example: 'null'
          accepted:
            type: boolean
            description: accept status, null denotes no action has been taken yet
            example: 'null'
          submitted:
            type: boolean
            description: submit status
            example: false
            
  Bid:
    type: object
    allOf: 
      - $ref: '#/definitions/ID'
      - $ref: '#/definitions/Audit'
      - $ref: '#/definitions/BidProto'
      - $ref: '#/definitions/BidInit'
      - type: object
        properties:
          acceptedAt:
            type: string
            format: date
            description: accept date, only shown if an accept/decline action has been taken
            example: '2017-01-01T00:00:00.000Z'
          submittedAt:
            type: string
            format: date
            description: accept date, only shown if a submit action has been taken
            example: '2017-01-01T00:00:00.000Z'
          awardedAt:
            type: string
            format: date
            description: award date, only shown if a award/reject action has been taken
            example: '2017-01-01T00:00:00.000Z'
          status:
            type: string
            enum:
              - invited
              - accepted
              - declined
              - submitted
              - awarded
              - rejected
            description: status of the bid
            example: invited
            
  Key:
    type: object
    required: 
      - name
    properties:
      name:
        type: string
        description: key name
        example: keyname
      datatype:
        type: string
        description: data type of the value
        example: boolean
        enum:
          - string
          - boolean
          - date
        default: string
      control:
        type: string
        description: UI control to be shown
        example: checkbox
        default: text
        enum:
          - checkbox
          - text
          - textarea
          - date
          
  Item:
    type: object
    properties:
      type:
        type: string
        example: keyvalue
        description: denote the nature of the data. For keyvalue there will always be one item in keys field and values field
        enum:
          - keyvalue
          - table
      keys:
        type: array
        description: List of key definition objects
        items:
          $ref: '#/definitions/Key'
      
      values:
        type: array
        description: List of values, data type defined by the key object in the parallel keys array
        items:
          type: string
  
  Block:
    type: object
    required: 
      - block
    properties:
      block:
        type: string
        description: section title
        example: Title 1
      items:
        type: array
        items:
          $ref: '#/definitions/Item'
  
  TermsAndConds:
    type: array
    items:
      $ref: '#/definitions/Block'
    
parameters:
  account:
    name: account
    in: path
    description: account name of the project
    required: true
    type: string
  project:
    name: project
    in: path
    description: project name
    required: true
    type: string
  packageName:
    name: packageName
    in: path
    description: package name
    required: true
    type: string
  attachmentId:
    name: attachmentId
    in: path
    description: attachment Id
    required: true
    type: string
  bidId:
    name: bidId
    in: path
    description: bid Id
    required: true
    type: string
